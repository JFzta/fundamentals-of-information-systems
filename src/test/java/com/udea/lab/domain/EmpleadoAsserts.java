package com.udea.lab.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class EmpleadoAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmpleadoAllPropertiesEquals(Empleado expected, Empleado actual) {
        assertEmpleadoAutoGeneratedPropertiesEquals(expected, actual);
        assertEmpleadoAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmpleadoAllUpdatablePropertiesEquals(Empleado expected, Empleado actual) {
        assertEmpleadoUpdatableFieldsEquals(expected, actual);
        assertEmpleadoUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmpleadoAutoGeneratedPropertiesEquals(Empleado expected, Empleado actual) {
        assertThat(actual)
            .as("Verify Empleado auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmpleadoUpdatableFieldsEquals(Empleado expected, Empleado actual) {
        assertThat(actual)
            .as("Verify Empleado relevant properties")
            .satisfies(a -> assertThat(a.getNombres()).as("check nombres").isEqualTo(expected.getNombres()))
            .satisfies(a -> assertThat(a.getApellidos()).as("check apellidos").isEqualTo(expected.getApellidos()))
            .satisfies(a -> assertThat(a.getCorreo()).as("check correo").isEqualTo(expected.getCorreo()))
            .satisfies(a -> assertThat(a.getNroCelular()).as("check nroCelular").isEqualTo(expected.getNroCelular()))
            .satisfies(a -> assertThat(a.getFechacontrato()).as("check fechacontrato").isEqualTo(expected.getFechacontrato()))
            .satisfies(a -> assertThat(a.getSalario()).as("check salario").isEqualTo(expected.getSalario()))
            .satisfies(a -> assertThat(a.getComisionPorcentaje()).as("check comisionPorcentaje").isEqualTo(expected.getComisionPorcentaje())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmpleadoUpdatableRelationshipsEquals(Empleado expected, Empleado actual) {
        assertThat(actual)
            .as("Verify Empleado relationships")
            .satisfies(a -> assertThat(a.getInmediatosuperior()).as("check inmediatosuperior").isEqualTo(expected.getInmediatosuperior()))
            .satisfies(a -> assertThat(a.getDepartamento()).as("check departamento").isEqualTo(expected.getDepartamento()));
    }
}
